name: Update nuspec file
description: Update .nuspec file
inputs:
  GITHUB_TOKEN:
    description: 'GITHUB_TOKEN'
    required: true
  project:
    required: true
    description: "Allowed values: EncryptedConfigValue.Module | EncryptedConfigValue.AspNetCore | EncryptedConfigValue.Cli"
  external-dependencies-sources:
    required: false
    description: "Allowed values: (EncryptedConfigValue | EncryptedConfigValue.Module | EncryptedConfigValue.AspNetCore | EncryptedConfigValue.Cli)[]"
  additional-files:
    required: false
    description: "Allowed values: string[]"
runs:
  using: "composite"
  steps:
      - name: Setup env variables
        shell: bash
        run: |
          TARGET_BRANCH_NAME="bot/${{ inputs.project }}/update-nuspec"
          echo "TARGET_BRANCH_NAME=$TARGET_BRANCH_NAME" >> $GITHUB_ENV
      
      - name: Setup git
        shell: bash
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          IS_TARGET_BRANCH_EXISTS=$(git ls-remote --heads origin $TARGET_BRANCH_NAME | grep -q "refs/heads/$TARGET_BRANCH_NAME" && echo true || echo false)
          echo "IS_TARGET_BRANCH_EXISTS=$IS_TARGET_BRANCH_EXISTS" >> $GITHUB_ENV
          if [[ "$IS_TARGET_BRANCH_EXISTS" == "true" ]]; then
            git fetch origin $TARGET_BRANCH_NAME:$TARGET_BRANCH_NAME
            git checkout $TARGET_BRANCH_NAME
            git reset --hard origin/main
          else
            git checkout -b $TARGET_BRANCH_NAME
          fi
      
      - uses: ./.github/actions/setup-dotnet-action
    
      - name: Build
        shell: bash
        run: dotnet build ./EncryptedConfigValue.sln --configuration Release

      - name: Update ${{ inputs.project }}.nuspec
        shell: bash
        run: |
          external_dependencies_paths=""
          if [ -n "${{ inputs.external-dependencies-sources }}" ]; then
            EXTERNAL_DEPENDENCIES_SOURCES=$(echo "${{ inputs.external-dependencies-sources }}" | grep -v '^$' | tr '\n' ',' | sed 's/, *,/,/g; s/,$//')
            IFS=',' read -r -a dependencies_array <<< "$EXTERNAL_DEPENDENCIES_SOURCES"
            for dependency in "${dependencies_array[@]}"; do
              path="./$dependency/$dependency.csproj"
              if [ -z "$external_dependencies_paths" ]; then
                external_dependencies_paths="'$path'"
              else
                external_dependencies_paths="$external_dependencies_paths,'$path'"
              fi
            done
          fi    

          external_dependencies_param=""
          if [ -n "$external_dependencies_paths" ]; then
            external_dependencies_param="-ExternalCsprojDependencies $external_dependencies_paths"
          fi
          
          additional_files_paths=""
          if [ -n "${{ inputs.additional-files }}" ]; then
            ADDITIONAL_FILES=$(echo "${{ inputs.additional-files }}" | grep -v '^$' | tr '\n' ',' | sed 's/, *,/,/g; s/,$//')
            IFS=',' read -r -a additional_files_array <<< "$ADDITIONAL_FILES"
            for path in "${additional_files_array[@]}"; do
              if [ -z "$additional_files_paths" ]; then
                additional_files_paths="'$path'"
              else
                  additional_files_paths="$additional_files_paths,'$path'"
              fi
            done
          fi

          additional_files_param=""
          if [ -n "$additional_files_paths" ]; then
            additional_files_param="-AdditionalFiles $additional_files_paths"
          fi

          cmd="pwsh -Command ./Scripts/UpdateNuspec.ps1 -CsprojPath './${{ inputs.project }}/${{ inputs.project }}.csproj\ -NuspecPath \./${{ inputs.project }}/${{ inputs.project }}.nuspec\ $external_dependencies_param $additional_files_param"
          echo $cmd
          eval "$cmd"
          echo "Finished"

      - name: Commit changes
        shell: bash
        run: |
          git add --all .
          git commit -m "Update ${{ inputs.project }}.nuspec"
          if [[ "$IS_TARGET_BRANCH_EXISTS" == "true" ]]; then
            git push --force origin $TARGET_BRANCH_NAME
          else
            git push --set-upstream origin $TARGET_BRANCH_NAME
          fi

      - name: Create Pull Request
        shell: bash
        run: |
          pr_id=$(gh pr list --base main --head $TARGET_BRANCH_NAME --json number --jq '.[0].number')
          if [ -z "$pr_id" ]; then
            gh pr create -B main -H $TARGET_BRANCH_NAME --title 'Update ${{ inputs.project }}.nuspec' --body "This PR updates the ${{ inputs.project }}.nuspec file to ensure correct project dependencies, metadata, or versioning. Please review the changes for accuracy and compliance."
          else
            gh pr edit $pr_id --title 'Update ${{ inputs.project }}.nuspec' --body "This PR updates the ${{ inputs.project }}.nuspec file to ensure correct project dependencies, metadata, or versioning. Please review the changes for accuracy and compliance."
          fi
        env:
          GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
