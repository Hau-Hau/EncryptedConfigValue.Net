name: Update dotnet version

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * MON'

concurrency:
  group: update-dotnet-version
  cancel-in-progress: true

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      active-dotnet-version: ${{ steps.active-dotnet-version.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=bot/update-dotnet-version" >> $GITHUB_OUTPUT
      - name: Get active .NET versions
        id: active-dotnet-version
        shell: pwsh
        run: |
          $activeVersions = ((((Invoke-WebRequest -Uri "https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json" -UseBasicParsing | ConvertFrom-Json)."releases-index" | Where-Object { $_."product" -eq ".NET" -and $_."support-phase" -eq "active" | Sort-Object -Property channel-version -Descending } | Select -Property channel-version)."channel-version") -split "," | ForEach-Object { "net$_" }) -join ","
          if ([string]::IsNullOrWhitespace($activeVersions)) {
            exit 1
          }
          "value=$($activeVersions)" >> $env:GITHUB_OUTPUT
          exit 0
      - name: "Reset branches"
        run: |
           BRANCHES=(
             "${{ steps.set-branch-name.outputs.value }}"
             "${{ steps.set-branch-name.outputs.value }}/partial/EncryptedConfigValue.Module"
             "${{ steps.set-branch-name.outputs.value }}/partial/EncryptedConfigValue.AspNetCore"
             "${{ steps.set-branch-name.outputs.value }}/partial/EncryptedConfigValue.Cli"
             "${{ steps.set-branch-name.outputs.value }}/partial/pipelines"
           )
           for BRANCH in "${BRANCHES[@]}"; do
             is_branch_exists_origin=$(git ls-remote --heads origin $BRANCH | grep -q "refs/heads/$BRANCH" && echo true || echo false)
             if [[ "$is_branch_exists_origin" == "true" ]]; then
               git push origin --delete $BRANCH || { echo "Failed to delete branch $BRANCH on origin."; exit 1; }
             fi
           done

  should-updated-targetframeworks:
    needs: [init]
    runs-on: ubuntu-latest
    outputs:
      module: ${{ steps.finalize.outputs.module }}
      aspnetcore: ${{ steps.finalize.outputs.aspnetcore }}
      cli: ${{ steps.finalize.outputs.cli }}
      
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/can-update-targetframeworks
        id: should-update-targetframeworks-module
        with:
          project: EncryptedConfigValue.Module
          target-dotnet-versions: ${{ needs.init.outputs.active-dotnet-version }}
      - uses: ./.github/actions/can-update-targetframeworks
        id: should-update-targetframeworks-aspnetcore
        with:
          project: EncryptedConfigValue.AspNetCore
          target-dotnet-versions: ${{ needs.init.outputs.active-dotnet-version }}
      - uses: ./.github/actions/can-update-targetframeworks
        id: should-update-targetframeworks-cli
        with:
          project: EncryptedConfigValue.Cli
          target-dotnet-versions: ${{ needs.init.outputs.active-dotnet-version }}

      - name: Finalize
        id: finalize
        run: |
          echo "module=${{ steps.should-update-targetframeworks-module.outputs.result }}" >> $GITHUB_OUTPUT
          echo "aspnetcore=${{ steps.should-update-targetframeworks-aspnetcore.outputs.result }}" >> $GITHUB_OUTPUT
          echo "cli=${{ steps.should-update-targetframeworks-cli.outputs.result }}" >> $GITHUB_OUTPUT

  update-dotnet-module:
    needs: [init, should-updated-targetframeworks]
    if: needs.should-updated-targetframeworks.outputs.module == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      project: ${{ steps.set-project-name.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}  
      status: ${{ steps.set-status.outputs.value }}  
    steps:
      - uses: actions/checkout@v4
      - name: Set project name
        id: set-project-name
        run: |
          echo "value=EncryptedConfigValue.Module" >> $GITHUB_OUTPUT
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=${{ needs.init.outputs.branch }}/partial/${{ steps.set-project-name.outputs.value }}" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-dotnet
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: true
      - uses: ./.github/actions/update-dotnet-version
        with:
          project: ${{ steps.set-project-name.outputs.value }}
          target-dotnet-versions: ${{ needs.init.outputs.active-dotnet-version }}
      - uses: ./.github/actions/commit-changes
        with:
          message: Update .NET version in ${{ steps.set-project-name.outputs.value }}
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - name: Set status
        id: set-status
        run: |
          echo "value=true" >> $GITHUB_OUTPUT


  update-dotnet-module-status-tracker:
    needs: [update-dotnet-module]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      completed: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          echo "value=${{needs.update-dotnet-module.outputs.status || 'false'}}" >> $GITHUB_OUTPUT

  update-dotnet-aspnetcore:
    needs: [init, should-updated-targetframeworks]
    if: needs.should-updated-targetframeworks.outputs.aspnetcore == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      project: ${{ steps.set-project-name.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}
      status: ${{ steps.set-status.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set project name
        id: set-project-name
        run: |
          echo "value=EncryptedConfigValue.AspNetCore" >> $GITHUB_OUTPUT
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=${{ needs.init.outputs.branch }}/partial/${{ steps.set-project-name.outputs.value }}" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-dotnet
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: true
      - uses: ./.github/actions/update-dotnet-version
        with:
          project: ${{ steps.set-project-name.outputs.value }}
          target-dotnet-versions: ${{ needs.init.outputs.active-dotnet-version }}
      - uses: ./.github/actions/commit-changes
        with:
          message: Update .NET version in ${{ steps.set-project-name.outputs.value }}
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - name: Set status
        id: set-status
        run: |
          echo "value=true" >> $GITHUB_OUTPUT

  update-dotnet-aspnetcore-status-tracker:
    needs: [update-dotnet-aspnetcore]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      completed: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          echo "value=${{needs.update-dotnet-aspnetcore.outputs.status || 'false'}}" >> $GITHUB_OUTPUT

  update-dotnet-cli:
    needs: [init, should-updated-targetframeworks]
    if: needs.should-updated-targetframeworks.outputs.cli == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      project: ${{ steps.set-project-name.outputs.value }}
      branch: ${{ steps.set-branch-name.outputs.value }}
      status: ${{ steps.set-status.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set project name
        id: set-project-name
        run: |
          echo "value=EncryptedConfigValue.Cli" >> $GITHUB_OUTPUT
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=${{ needs.init.outputs.branch }}/partial/${{ steps.set-project-name.outputs.value }}" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-dotnet
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: true
      - uses: ./.github/actions/update-dotnet-version
        with:
          project: ${{ steps.set-project-name.outputs.value }}
          target-dotnet-versions: ${{ needs.init.outputs.active-dotnet-version }}
      - uses: ./.github/actions/commit-changes
        with:
          message: Update .NET version in ${{ steps.set-project-name.outputs.value }}
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - name: Set status
        id: set-status
        run: |
          echo "value=true" >> $GITHUB_OUTPUT

  update-dotnet-cli-status-tracker:
    needs: [update-dotnet-cli]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      completed: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          echo "value=${{needs.update-dotnet-cli.outputs.status || 'false'}}" >> $GITHUB_OUTPUT

  update-pipelines:
    needs: [init, should-updated-targetframeworks]
    if: needs.should-updated-targetframeworks.outputs.module == 'true' || needs.should-updated-targetframeworks.outputs.aspnetcore == 'true' ||  needs.should-updated-targetframeworks.outputs.cli == 'true'
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set-branch-name.outputs.value }}
      status: ${{ steps.set-status.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - name: Set branch name
        id: set-branch-name
        run: |
          echo "value=${{ needs.init.outputs.branch }}/partial/pipelines" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/setup-git
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          hard-reset: true
      - name: Update setup-dotnet action
        shell: pwsh
        run: |
          $versionString = "${{ needs.init.outputs.active-dotnet-version }}"
          write-host $versionString
          $filePath = "./.github/actions/setup-dotnet/action.yml"
          $versions = $versionString -split ',' | ForEach-Object { ($_ -replace 'net', '') + ".x" }
          $yamlContent = Get-Content $filePath -Raw
          $dotnetVersionPattern = "(?sm)dotnet-version:\s*\|.*?(?=\w+:|\z)"
          $indentation = if ($yamlContent -match "([ \t]*)dotnet-version: \|") { "$($matches[1])  " } else { "" }
          $newDotnetVersionSection = "dotnet-version: |`r`n${indentation}" + ($versions | ForEach-Object { "${indentation}$_" } | Out-String).Trim()
          $updatedYamlContent = $yamlContent -replace $dotnetVersionPattern, $newDotnetVersionSection
          Set-Content $filePath -Value $updatedYamlContent
      - uses: ./.github/actions/commit-changes
        with:
          message: Update pipelines
      - uses: ./.github/actions/push-changes
        with:
          branch: ${{ steps.set-branch-name.outputs.value }}
          force: true
      - name: Set status
        id: set-status
        run: |
          echo "value=true" >> $GITHUB_OUTPUT

  update-pipelines-status-tracker:
    needs: [update-pipelines]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      completed: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          echo "value=${{needs.update-pipelines.outputs.status || 'false'}}" >> $GITHUB_OUTPUT

  collect:
    needs: [
      update-dotnet-module-status-tracker,
      update-dotnet-aspnetcore-status-tracker,
      update-dotnet-cli-status-tracker,
      update-pipelines-status-tracker
    ]
    if: always() && contains(needs.*.outputs.completed, 'true') 
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-status.outputs.value }}
    steps:
      - name: Set status
        id: set-status
        run: |
          values=(
            '${{ needs.update-dotnet-module-status-tracker.outputs.completed || 'false' }}'
            '${{ needs.update-dotnet-aspnetcore-status-tracker.outputs.completed || 'false' }}'
            '${{ needs.update-dotnet-cli-status-tracker.outputs.completed || 'false' }}'
            '${{ needs.update-pipelines-status-tracker.outputs.completed || 'false' }}'
          )
          result='false'
          for value in "${values[@]}"; do
            if [ "$value" == "true" ]; then
              result='true'
              break
            fi
          done
          echo "value=$result" >> $GITHUB_OUTPUT

  finalize:
    needs: [
        init,
        collect
    ]
    if: always() && needs.collect.outputs.result == 'true'
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - uses: ./.github/actions/setup-git
          with:
            branch: ${{ needs.init.outputs.branch }}
            hard-reset: true
        - name: Merge
          run:
           TARGET_BRANCH="${{ needs.init.outputs.branch }}"
           PARTIAL_BRANCHES=(
             "$TARGET_BRANCH/partial/EncryptedConfigValue.Module"
             "$TARGET_BRANCH/partial/EncryptedConfigValue.AspNetCore"
             "$TARGET_BRANCH/partial/EncryptedConfigValue.Cli"
             "$TARGET_BRANCH/partial/pipelines"
           )
           for BRANCH in "${PARTIAL_BRANCHES[@]}"; do
             is_branch_exists=$(git ls-remote --heads origin $BRANCH | grep -q "refs/heads/$BRANCH" && echo true || echo false)
             if [[ "$is_branch_exists" == "true" ]]; then           
               echo "Rebasing $BRANCH onto $TARGET_BRANCH..."
               git checkout $BRANCH || exit 1
               git rebase $TARGET_BRANCH || { echo "Rebase failed for $BRANCH. Aborting."; exit 1; }
               echo "Rebase successful for $BRANCH."
             fi
           done
           git checkout $TARGET_BRANCH           
           for BRANCH in "${PARTIAL_BRANCHES[@]}"; do
             is_branch_exists_origin=$(git ls-remote --heads origin $BRANCH | grep -q "refs/heads/$BRANCH" && echo true || echo false)
             if [[ "$is_branch_exists_origin" == "true" ]]; then           
               echo "Deleting branch $BRANCH on origin..."
               git push origin --delete $BRANCH || { echo "Failed to delete branch $BRANCH on origin. Continuing."; }
             fi 
           done
        - uses: ./.github/actions/commit-changes
          with:
            message: Update cli nuspec
        - uses: ./.github/actions/push-changes
          with:
            branch: ${{ needs.init.outputs.branch }}
            force: true
        - uses: ./.github/actions/put-pull-request
          with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            title: Update .NET versions
            body: This PR updates .NET version used in project and pipelines.
            from: ${{ needs.init.outputs.branch }}
            into: main
